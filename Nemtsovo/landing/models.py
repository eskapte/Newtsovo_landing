from django.contrib.contenttypes.fields import GenericForeignKey, GenericRelation
from django.contrib.contenttypes.models import ContentType
from django.core.validators import MinValueValidator
from django.db import models
from django.utils import timezone
from django.contrib import admin
from django.conf import settings
import pytz
from image_cropping import ImageRatioField


class BookingIdentifier(models.Model):
    name = models.CharField('–ù–∞–∑–≤–∞–Ω–∏–µ', max_length=200, unique=True)

    class Meta:
        verbose_name = '–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –±—Ä–æ–Ω–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞'
        verbose_name_plural = '–ò–Ω–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –±—Ä–æ–Ω–∏—Ä—É–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤'

    def __str__(self):
        return self.name


class Booking(models.Model):
    booking_identifier = models.ForeignKey(
        BookingIdentifier,
        on_delete=models.CASCADE,
        verbose_name='–ß—Ç–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ',
        editable=False)
    fio = models.CharField(verbose_name='–§–ò–û', max_length=100, editable=False)
    phone_number = models.CharField(verbose_name='–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', max_length=20, editable=False)
    adults_count = models.PositiveIntegerField(
        "–ö–æ–ª-–≤–æ –≤–∑—Ä–æ—Å–ª—ã—Ö",
        default=1,
        validators=[MinValueValidator(1)],
        editable=False)
    childs_count = models.PositiveIntegerField("–ö–æ–ª-–≤–æ –¥–µ—Ç–µ–π", default=0, editable=False)
    desired_dates = models.CharField(verbose_name='–ñ–µ–ª–∞–µ–º—ã–µ –¥–∞—Ç—ã', max_length=400, editable=False)
    is_has_whatsapp = models.BooleanField("–ò–º–µ–µ—Ç—Å—è Whatsapp", editable=False)

    date_create = models.DateTimeField('–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è', editable=False, auto_now_add=True)
    is_dayly = models.BooleanField("–°—É—Ç–æ—á–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", default=False)
    is_late_checkout = models.BooleanField("–ü–æ–∑–¥–Ω–∏–π –≤—ã–µ–∑–¥", blank=True, default=False)
    is_early_checkin = models.BooleanField("–†–∞–Ω–Ω–∏–π –∑–∞–µ–∑–¥", blank=True, default=False)

    # —Ç–∞–∫ —Å–¥–µ–ª–∞–Ω–æ —Ä–∞–¥–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    class BookingStatus(models.TextChoices):
        ACTIVE = 'a', '–ê–∫—Ç–∏–≤–Ω–æ üü¢'
        APPROVED = 'b', '–ë—Ä–æ–Ω—å ‚úîÔ∏è'
        CANCELED = 'c', '–û—Ç–º–µ–Ω–µ–Ω–æ ‚ùå'

    status = models.CharField('–°—Ç–∞—Ç—É—Å', choices=BookingStatus, default=BookingStatus.ACTIVE, max_length=20)
    manager_comment = models.TextField('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', blank=True, null=True,
                                       help_text='–ï—Å–ª–∏ –Ω–∞–¥–æ —á—Ç–æ-—Ç–æ –ø–æ–º–µ—Ç–∏—Ç—å –¥–ª—è —Å–µ–±—è')
    user_comment = models.TextField(
        "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫–ª–∏–µ–Ω—Ç–∞", blank=True, null=True, help_text="–ò–∑ –∑–∞—è–≤–∫–∏ –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", editable=False)
    date_start_fact = models.DateTimeField("–§–∞–∫—Ç. –Ω–∞—á–∞–ª–æ", blank=True, null=True)
    date_end_fact = models.DateTimeField(
        "–§–∞–∫—Ç. –∫–æ–Ω–µ—Ü",
        blank=True,
        null=True)

    class Meta:
        verbose_name = '–ó–∞—è–≤–∫–∞ –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ'
        verbose_name_plural = '–ó–∞—è–≤–∫–∏ –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ'
        ordering = ['status', '-date_create']

    def __str__(self):
        return self.booking_identifier.name


class Period(models.Model):
    singular = models.CharField(max_length=6, verbose_name="–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ (1 —á–∞—Å)")
    plural = models.CharField(max_length=6, verbose_name="–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ (2 —á–∞—Å–∞)")
    plural_special = models.CharField(max_length=6, verbose_name="–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ (30 —á–∞—Å–æ–≤)")

    def pluralize(self, count):
        if count % 10 == 1 and count % 100 != 11:
            return self.singular
        elif 2 <= count % 10 <= 4 and (count % 100 < 10 or count % 100 >= 20):
            return self.plural
        else:
            return self.plural_special

    def __str__(self):
        return self.singular

    class Meta:
        verbose_name = '–ü–µ—Ä–∏–æ–¥/–ö–æ–ª-–≤–æ'
        verbose_name_plural = '–ü–µ—Ä–∏–æ–¥—ã/–ö–æ–ª-–≤–æ'


class AdditionalInfo(models.Model):
    displayed_name = models.CharField(
        verbose_name='–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ',
        max_length=100,
        help_text='–ù–∞–∑–≤–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç–µ',
        default='–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
    inner_name = models.CharField(
        verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ',
        max_length=100,
        help_text='–≠—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–∂–µ –¥–ª—è –≤–∞—à–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞, –æ–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∑–¥–µ—Å—å, –≤ –∞–¥–º–∏–Ω–∫–µ',
        default='–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')

    def get_unique_name(self):
        return "additinal_info" + str(self.id)

    class Meta:
        verbose_name = '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'
        verbose_name_plural = verbose_name

    def __str__(self):
        return self.inner_name


class AdditionalInfoItem(models.Model):
    text = models.CharField(verbose_name="–¢–µ–∫—Å—Ç", max_length=500)
    additional_info = models.ForeignKey(AdditionalInfo, on_delete=models.CASCADE)

    def __str__(self):
        return self.text

    class Meta:
        verbose_name = '–ü—É–Ω–∫—Ç'
        verbose_name_plural = '–ü—É–Ω–∫—Ç—ã'


class Attachment(models.Model):
    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)
    object_id = models.PositiveIntegerField()
    content_object = GenericForeignKey('content_type', 'object_id')

    def get_upload_path(self, filename):
        return f'landing/{self.content_type.name}_{self.object_id}/{filename}'

    def get_miniature_upload_path(self, filename):
        return f'landing/mini/{self.content_type.name}_{self.object_id}/{filename}'

    file = models.FileField("–§–æ—Ç–æ/–í–∏–¥–µ–æ", upload_to=get_upload_path)
    miniature = ImageRatioField(
        "file",
        '420x300',
        verbose_name="–ú–∏–Ω–∏–∞—Ç—é—Ä–∞",
        size_warning=True)
    order = models.PositiveIntegerField("–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", default=0, db_index=True)

    def __str__(self):
        return self.file.name

    def is_video(self):
        return self.file.name.endswith('.mp4')

    class Meta:
        indexes = [
            models.Index(fields=["content_type", "object_id"]),
        ]
        verbose_name = '–§–æ—Ç–æ/–í–∏–¥–µ–æ'
        verbose_name_plural = verbose_name
        ordering = ['order']


class BookingBtnTextChoice(models.TextChoices):
    BOOKING = "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å"
    APPOINTMENT = "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è", "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"


class House(models.Model):
    name = models.CharField(verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ', max_length=32)
    start_price = models.PositiveIntegerField(verbose_name='–ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞', help_text="–ü–æ—Å—Ç–∞–≤—å—Ç–µ 0 –µ—Å–ª–∏ —ç—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ")
    duration = models.PositiveIntegerField(
        verbose_name='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
        default=1,
        validators=[MinValueValidator(1)])
    period = models.ForeignKey(Period, verbose_name='–ü–µ—Ä–∏–æ–¥/–ö–æ–ª-–≤–æ', default=1, on_delete=models.SET_DEFAULT)
    description = models.TextField(verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ', max_length=400)
    additional_info = models.ForeignKey(
        AdditionalInfo,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name='–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
        help_text='–î–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –∫–æ–Ω–µ—Ü –æ–ø–∏—Å–∞–Ω–∏—è –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ–º –æ–∫–Ω–æ–º –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏')

    order = models.PositiveIntegerField("–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", default=0, db_index=True)

    media = GenericRelation(Attachment)
    booking_identifier = models.ForeignKey(
        BookingIdentifier,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –±—Ä–æ–Ω–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞",
        help_text='–ù—É–∂–µ–Ω –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ï—Å–ª–∏ –ø—É—Å—Ç–æ–π, —Ç–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–π —ç–ª-—Ç –±—É–¥–µ—Ç –Ω–µ–ª—å–∑—è')
    booking_btn_text = models.CharField(
        "–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ",
        max_length=25,
        choices=BookingBtnTextChoice,
        default=BookingBtnTextChoice.BOOKING)

    def get_pluralized_period(self):
        return self.period.pluralize(self.duration)

    def get_unique_name(self):
        return self.name + str(self.id)

    def get_duration_if_it_gte_1(self):
        if self.duration <= 1:
            return ""
        return str(self.duration) + " "

    def is_free(self):
        return self.start_price <= 0

    class Meta:
        verbose_name = '–î–æ–º–∏–∫'
        verbose_name_plural = '–î–æ–º–∏–∫–∏'
        ordering = ['order']

    def __str__(self):
        return self.name


class WellnessTreatment(models.Model):
    name = models.CharField(verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ', max_length=32)
    start_price = models.PositiveIntegerField(verbose_name='–ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞', help_text="–û—Å—Ç–∞–≤—å—Ç–µ 0 –µ—Å–ª–∏ —ç—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ")
    duration = models.PositiveIntegerField(
        verbose_name='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
        default=1,
        validators=[MinValueValidator(1)])
    period = models.ForeignKey(Period, verbose_name='–ü–µ—Ä–∏–æ–¥/–ö–æ–ª-–≤–æ', default=1, on_delete=models.SET_DEFAULT)
    description = models.TextField(verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ', max_length=400)
    additional_info = models.ForeignKey(
        AdditionalInfo,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name='–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
        help_text='–î–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –∫–æ–Ω–µ—Ü –æ–ø–∏—Å–∞–Ω–∏—è –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ–º –æ–∫–Ω–æ–º –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏')
    order = models.PositiveIntegerField("–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", default=0, db_index=True)

    media = GenericRelation(Attachment)
    booking_identifier = models.ForeignKey(
        BookingIdentifier,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –±—Ä–æ–Ω–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞",
        help_text='–ù—É–∂–µ–Ω –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ï—Å–ª–∏ –ø—É—Å—Ç–æ–π, —Ç–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–π —ç–ª-—Ç –±—É–¥–µ—Ç –Ω–µ–ª—å–∑—è')

    booking_btn_text = models.CharField(
        "–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ",
        max_length=25,
        choices=BookingBtnTextChoice,
        default=BookingBtnTextChoice.BOOKING)

    def get_pluralized_period(self):
        return self.period.pluralize(self.duration)

    def get_unique_name(self):
        return self.name + str(self.id)

    def get_duration_if_it_gte_1(self):
        if self.duration <= 1:
            return ""
        return str(self.duration) + " "

    def is_free(self):
        return self.start_price <= 0

    class Meta:
        verbose_name = '–û–∑–¥–æ—Ä–æ–≤–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞'
        verbose_name_plural = '–û–∑–¥–æ—Ä–æ–≤–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã'
        ordering = ['order']

    def __str__(self):
        return self.name


class Action(models.Model):
    name = models.CharField(verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ', max_length=32)
    start_price = models.PositiveIntegerField(verbose_name='–ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞', help_text="–û—Å—Ç–∞–≤—å—Ç–µ 0 –µ—Å–ª–∏ —ç—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ")
    duration = models.PositiveIntegerField(
        verbose_name='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å / –∫–æ–ª-–≤–æ',
        default=1,
        validators=[MinValueValidator(1)])
    period = models.ForeignKey(Period, verbose_name='–ü–µ—Ä–∏–æ–¥/–ö–æ–ª-–≤–æ', default=1, on_delete=models.SET_DEFAULT)
    description = models.TextField(verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ', max_length=400)
    additional_info = models.ForeignKey(
        AdditionalInfo,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name='–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
        help_text='–î–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –∫–æ–Ω–µ—Ü –æ–ø–∏—Å–∞–Ω–∏—è –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ–º –æ–∫–Ω–æ–º –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏')
    order = models.PositiveIntegerField("–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", default=0, db_index=True)

    media = GenericRelation(Attachment)
    booking_identifier = models.ForeignKey(
        BookingIdentifier,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –±—Ä–æ–Ω–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞",
        help_text='–ù—É–∂–µ–Ω –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ï—Å–ª–∏ –ø—É—Å—Ç–æ–π, —Ç–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–π —ç–ª-—Ç –±—É–¥–µ—Ç –Ω–µ–ª—å–∑—è')

    booking_btn_text = models.CharField(
        "–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ",
        max_length=25,
        choices=BookingBtnTextChoice,
        default=BookingBtnTextChoice.BOOKING)

    def get_pluralized_period(self):
        return self.period.pluralize(self.duration)

    def get_unique_name(self):
        return self.name + str(self.id)

    def get_duration_if_it_gte_1(self):
        if self.duration <= 1:
            return ""
        return str(self.duration) + " "

    def is_free(self):
        return self.start_price <= 0

    class Meta:
        verbose_name = '–î–æ—Å—É–≥'
        verbose_name_plural = '–î–æ—Å—É–≥'
        ordering = ['order']

    def __str__(self):
        return self.name


MEASURE_CHOICES = {
    ('–∫–≥', '–∫–∏–ª–æ–≥—Ä–∞–º–º'),
    ('—à—Ç', '—à—Ç—É–∫–∞'),
    ('–ª', '–ª–∏—Ç—Ä'),
    ('–≥', '–≥—Ä–∞–º–º')
}


class OurProduct(models.Model):
    name = models.CharField('–ù–∞–∑–≤–∞–Ω–∏–µ', max_length=50)
    description = models.TextField('–û–ø–∏—Å–∞–Ω–∏–µ', max_length=500, blank=True, null=True)

    price = models.PositiveIntegerField('–°—Ç–æ–∏–º–æ—Å—Ç—å')
    count = models.PositiveIntegerField('–ö–æ–ª-–≤–æ', default=1)
    measure = models.CharField("–ï–¥. –∏–∑–º–µ—Ä–µ–Ω–∏—è", choices=MEASURE_CHOICES, max_length=4, default=('—à—Ç', '—à—Ç—É–∫–∞'))
    is_available = models.BooleanField("–í –Ω–∞–ª–∏—á–∏–∏", default=True)

    media = GenericRelation(Attachment)

    def get_unique_name(self):
        return self.name + str(self.id)

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = '–ü—Ä–æ–¥—É–∫—Ü–∏—è'
        verbose_name_plural = verbose_name
        ordering = ['-is_available', 'price']


class Event(models.Model):
    title = models.CharField("–ó–∞–≥–æ–ª–æ–≤–æ–∫", max_length=100)
    description = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ")
    date = models.DateTimeField("–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è")
    media = GenericRelation(Attachment)

    @admin.display(boolean=True, description='–ü—Ä–æ—à–ª–æ')
    def is_passed(self):
        return timezone.now() >= self.date

    def get_unique_name(self):
        return self.title + str(self.id)

    def __str__(self):
        datetime = self.date.astimezone(pytz.timezone(settings.TIME_ZONE)).strftime("%d.%m.%Y %H:%M")
        return f'{self.title} - {datetime}'

    class Meta:
        verbose_name = '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ'
        verbose_name_plural = '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'
        ordering = ['date']


class News(models.Model):
    title = models.CharField("–ó–∞–≥–æ–ª–æ–≤–æ–∫", max_length=100)
    description = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ")
    date = models.DateTimeField("–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è", auto_now_add=True)
    media = GenericRelation(Attachment)

    def get_unique_name(self):
        return self.title + str(self.id)

    def __str__(self):
        datetime = self.date.astimezone(pytz.timezone(settings.TIME_ZONE)).strftime("%d.%m.%Y")
        return f'{self.title} - {datetime}'

    class Meta:
        verbose_name = '–ù–æ–≤–æ—Å—Ç—å'
        verbose_name_plural = '–ù–æ–≤–æ—Å—Ç–∏'
        ordering = ['-date']


class OurPet(models.Model):
    name = models.CharField('–ò–º—è –ø–∏—Ç–æ–º–∞—Ü–∞', max_length=100)
    description = models.TextField('–û–ø–∏—Å–∞–Ω–∏–µ', blank=True, null=True)
    media = GenericRelation(Attachment)

    order = models.PositiveIntegerField("–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", default=0, db_index=True)

    def __str__(self):
        return self.name

    def get_unique_name(self):
        return self.name + str(self.id)

    class Meta:
        verbose_name = '–ü–∏—Ç–æ–º–µ—Ü'
        verbose_name_plural = '–ü–∏—Ç–æ–º—Ü—ã'
        ordering = ['order']


class ErrorLog(models.Model):
    error_message = models.CharField('–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ', max_length=500, editable=False)
    stack_trace = models.TextField('–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞', blank=True, null=True, editable=False)
    date = models.DateTimeField('–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è', auto_now_add=True, editable=False)
    additional_info = models.TextField('–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', blank=True, null=True, editable=False)
    is_solved = models.BooleanField('–†–µ—à–µ–Ω–æ', default=False)

    def __str__(self):
        return self.error_message

    class Meta:
        verbose_name = '–û—à–∏–±–∫–∞'
        verbose_name_plural = '–û—à–∏–±–∫–∏'
        ordering = ['is_solved', '-date']